git的使用
创建一个空文件夹
进入目录下初始化
git init
添加提交内容
git add filename
提交commit
git commit -m "this is txt"
查看历史提交
git log
查看最近的历史提交
git log --pretty=oneline
查看历史命令
git reflog
回退上个版本
git reset --hard HEAD^ 
回退上上个版本
git reset --hard HEAD^^ 
恢复版本
git reset --hard e8ffe
查看文件状态(暂存区)
git status
查看工作区和版本区的不同(根据修改提交)
git diff HEAD -- test.txt
丢弃工作区的修改
git checkout -- text.txt
丢弃暂存区的修改(add后)
git reset HEAD readme.txt
git checkout -- text.txt
回退版本(commit后)(远程无效)
git reset --hard HEAD^^ 
删除git库内容
git rm text.txt
创建ssh key
ssh-keygen -t rsa -C "youremail@example.com"
关联远程github仓库
git remote add origin https://github.com/gm332211/test.git
本地仓库推送到远程仓库(第一次空库提交)
git push -u origin master
以后提交
git push origin master
克隆远程仓库
创建分支并切换
git checkout -b dev
创建分支
git branch dev
切换分支
git checkout dev
查看分支
git branch dev
合并分支内容
git merge dev
删除分支
git branch -d dev
合并出现的问题
Git用<<<<<<<，=======，>>>>>>>标记冲突的地方
解决冲突后才能继续合并
不丢弃分支合并
git merge --no-ff -m "merge with no-ff" dev
查看合并分支历史
git log --graph --pretty=oneline --abbrev-commit
保存当前为保存的进度
git stash
查看当前保存进度
git stash list
返回保存进度
git stash pop
git stash apply stash@{0}
强行删除丢弃没有合并的分支
git branch -D feature-vulcan
远程推送分支
git push origin dev
创建一个标签
git tag v1.0
查看标签
git tag
通过commit_id打标签
git tag v0.9 25b6
查看标签信息
git branch --set-upstream dev origin/dev
打签名标签
git tag -s v0.2 -m "signed version 0.2 released" 25b6
签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：
删除标签
git tag -d v0.1
推送标签到远程git库
git push origin v1.0
推送所有标签
git push origin --tags
删除远程标签(预先删除本地标签)
git push origin :refs/tags/v0.9
查看远程关联
git remote -v
删除远程关联
git remote rm origin